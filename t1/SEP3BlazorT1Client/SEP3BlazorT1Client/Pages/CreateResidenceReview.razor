@page "/CreateResidenceReview/{ResidenceId:int}"
@using SEP3BlazorT1Client.Data
@using SEP3BlazorT1Client.Models
@using SEP3BlazorT1Client.Components.ResidenceReviewForm
@inject IResidenceService _residenceService
@inject NavigationManager _navigationManager
@inject IGuestService _guestService
@inject AuthenticationStateProvider _authenticationStateProvider
<AuthorizeView Policy="MustBeApprovedGuest">
    <Authorized>
        <div class="container-fluid d-flex justify-content-center mt-3">
            <div class="row">
                <div class="col">
                    @if (_residence != null && _guest != null)
                    {
                        <ResidenceReviewForm Residence="@_residence" Guest="@_guest"/>
                    }
                    else if (_residence == null || _guest == null)
                    {
                        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium"/>
                    }
                    else
                    {
                        <p>Could not find residence or guest</p>
                    }

                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="container-fluid d-flex justify-content-center">
            <div class="row">
                <div class="col">
                    <p>You must be logged in as guest uwu</p>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int ResidenceId { get; set; }

    private Residence _residence;
    private Guest _guest;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _guest = await _guestService.GetGuestByEmailAsync(user.Claims.FirstOrDefault(c => c.Type.ToString() == "email").Value);
        _residence = await _residenceService.GetResidenceByIdAsync(ResidenceId);
        StateHasChanged();
    }

}