@page "/RentResidence/{ResidenceId:int}"
@using SEP3BlazorT1Client.Data
@using SEP3BlazorT1Client.Models
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject IGuestService GuestService
@inject IResidenceService ResidenceService
@inject IRentalService RentalService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<AuthorizeView Context="Auth" Policy="MustBeApprovedGuest">
    <Authorized>
        @if (_newRentRequest.Residence != null)
        {
            <div class="container-fluid d-flex justify-content-center align-items-center">
                <div class="row">
                    <div class="col">
                        <MatPaper Elevation="11" Rounded="true" Style="border-radius: 10px">

                            <div class="card">
                                <div class="card__header">
                                    <div class="d-flex justify-content-between">
                                        <h1>@_newRentRequest.Residence.PricePerNight DKK.- / night</h1>
                                        <span>@_newRentRequest.Residence.GetAverageRating() Average rating</span>
                                    </div>
                                    <hr>
                                </div>

                                <div class="card__content">
                                    <div class="available-period">
                                        <span>@residence.AvailableFrom.Value.ToShortDateString()</span>

                                        <span>@residence.AvailableTo.Value.ToShortDateString()</span>
                                    </div>
                                    <div class="d-flex flex-row">
                                        <MatDatePicker @bind-Value="@_startDateInput" Required="true" Outlined="true" Label="Start date" OnInput="@(StateHasChanged)"/>
                                        <MatDatePicker @bind-Value="@_endDateInput" Required="true" Outlined="true" Label="End date" OnInput="@(StateHasChanged)"/>
                                    </div>
                                    <EditForm EditContext="@EditContext">
                                        <DataAnnotationsValidator/>
                                        <MatTextField @bind-Value="_newRentRequest.NumberOfGuests" Label="Number of guests" Style="width: 100%"/>
                                        <ValidationMessage For="@(() => _newRentRequest.NumberOfGuests)"/>
                                    </EditForm>

                                    <MatButton Label="Send Request" OnClick="@CreateRequest" Style="width: 100%" Raised="true"/>

                                    <p style="font-weight: lighter; font-style: italic; font-size: 15px; margin-top: 0.5rem">
                                        An request will be sent to the Host. The Host can either choose to approve or reject the rent request.
                                        To check the status of request after sending, navigate to ...
                                    </p>


                                    <p style="color:red">@_errorMessage</p>
                                    <hr>
                                    <div class="d-flex flex-row justify-content-between">
                                        <span style="text-decoration: underline">@(GetTotalDays()) days x @_newRentRequest.Residence.PricePerNight DKK.-</span>
                                        <span>@(GetTotalDays() * _newRentRequest.Residence.PricePerNight) DKK.-</span>
                                    </div>
                                    <div class="d-flex flex-row justify-content-between">
                                        <span style="text-decoration: underline">@_newRentRequest.NumberOfGuests guests</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex flex-row justify-content-between">
                                        <span style="font-weight: bold">Price in total</span>
                                        <span style="font-weight: bold">@(GetTotalDays() * _newRentRequest.Residence.PricePerNight * _newRentRequest.NumberOfGuests) DKK.-</span>
                                    </div>
                                </div>
                            </div>
                        </MatPaper>
                    </div>
                </div>
            </div>
        }
        else
        {
            <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium"/>
        }
    </Authorized>

    <NotAuthorized>
        <div class="container-fluid">
            <p>Must be logged in as guest to rent residences</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public int ResidenceId { get; set; }

    private DateTime _startDateInput;
    private DateTime _endDateInput;

    private RentRequest _newRentRequest = new() {StartDate = DateTime.UtcNow, EndDate = DateTime.UtcNow.AddDays(1), Status = RentRequestStatus.NOTANSWERED, RequestCreationDate = DateTime.UtcNow};

    [CascadingParameter]
    public EditContext EditContext { get; private set; }

    private Residence _testResidence;
    private Residence residence = new Residence();

    private string _errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            EditContext = new EditContext(_newRentRequest);
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            residence = await ResidenceService.GetResidenceByIdAsync(ResidenceId);
            if (user.Identity.IsAuthenticated)
            {
                var guest = await GuestService.GetGuestByIdAsync(Int32.Parse(user.Claims.FirstOrDefault(c => c.Type.ToString() == "Id").Value));

                if (guest != null)
                {
                    _newRentRequest.Guest = guest;
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
                if (residence != null)
                {
                    _newRentRequest.Residence = residence;
                }
                EditContext = new EditContext(_newRentRequest);
                Console.WriteLine(JsonSerializer.Serialize(_newRentRequest));
            }
            else
            {
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception e)
        {
            _errorMessage = "";
            _errorMessage = "Something went wrong.. try refreshing the page";
        }
    }

    private int GetTotalDays()
    {
        return (_endDateInput.Date - _startDateInput.Date).Days;
    }

    private async void CreateRequest()
    {
        try
        {
    /*
             Bug MatBlazor DatePicker subtracts 1 day from the actual selected date.
             This is a known issue and has an open issue on github. 
             */
            _newRentRequest.StartDate = _startDateInput.AddDays(1);
            _newRentRequest.EndDate = _endDateInput.AddDays(1);

            await RentalService.CreateRentRequestAsync(_newRentRequest);
            StateHasChanged();
            NavigationManager.NavigateTo("/residences");
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            StateHasChanged();
        }
    }

}