@page "/HostResidences"
@using SEP3BlazorT1Client.Models
@using SEP3BlazorT1Client.Data
@using System.ComponentModel.DataAnnotations
@inject IResidenceService _residenceService
@inject IHostService _hostService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IResidenceReviewService _residenceReviewService
@inject MatDialogService _matDialogService

<AuthorizeView Policy="MustBeApprovedHost">
<Authorized>
<p>@_errorMessage</p>
@if (_residences == null)
{
    <MatProgressBar Indeterminate="true" Reversed="true"></MatProgressBar>
}
else if (_residences.Count == 0)
{
    <p> You have no registered residences. Press the button below to register one.</p>
    <MatButton OnClick="@(() => _navigationManager.NavigateTo("/registerresidence"))" Label="Go to residence registration"></MatButton>
}
else
{
    <div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">
    @foreach (var residence in _residences)
    {
        <div class="mat-layout-grid-cell">
            <MatCard class="demo-mat-card p-3" >
                <MatCardContent>
                    @if (string.IsNullOrEmpty(residence.ImageUrl))
                    {
                        <MatCardMedia Wide="true" ImageUrl="https://raw.githubusercontent.com/LilianBittar/VIABnB-SEP3/sprint-10/t1/SEP3BlazorT1Client/SEP3BlazorT1Client/wwwroot/assets/dirt.jpeg"></MatCardMedia>
                    }
                    else
                    {
                        <MatCardMedia Wide="true" ImageUrl=@residence.ImageUrl></MatCardMedia>
                    }
                    <div class="demo-mat-card-content">
                        <MatHeadline6 class="demo-mat-card-clean-margin">
                            UwU
                        </MatHeadline6>
                        <MatSubtitle2 class="demo-mat-card-clean-margin">
                            @residence.Address.ToString()
                        </MatSubtitle2>
                        @if (residence.IsAvailable)
                        {
                            <div class="available-period">
                                <span>@residence.AvailableFrom.Value.ToShortDateString()</span>

                                <span>@residence.AvailableTo.Value.ToShortDateString()</span>
                            </div>
                        }

                    </div>

                    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                        @residence.Description
                    </MatBody2>
                    <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                        @residence.PricePerNight DKK ,- / pr. night
                    </MatBody2>

                </MatCardContent>
                <MatCardActions>
                    <MatButton Unelevated="true" Style="width:20em; height: 2em; background-color: blue;" OnClick="@(() => OpenResidenceDetailsDialog(residence))">Details</MatButton>
                    @if (!residence.IsAvailable)
                    {
                        <MatButton Unelevated="true" Style=" width:20em; height: 2em; background-color: green;" OnClick="@(() => OpenDialog(residence))">set to public</MatButton>
                    }
                    else
                    {
                        <MatButton TrailingIcon="cancel" Unelevated="true" Style="background-color: red; width:20em; height: 2em;" OnClick="@(() => SetToPrivate(residence))">set to private</MatButton>
                    }
                    <MatButton TrailingIcon="edit" Unelevated="true" Style="width:20em; height: 2em;" OnClick="@(() => ToEditResidence(residence.Id))">Edit Residence</MatButton>
                </MatCardActions>
            </MatCard>
        </div>
    }

    <MatDialog @bind-IsOpen="@_dialogIsOpen" SurfaceStyle="min-width: 1000px !important;"Class="detail-container large">
        <MatDialogTitle>Details of the Residence</MatDialogTitle>
        <MatDialogContent>
            <p>
                <MatNumericUpDownField Label="Maximum number of guests"@bind-Value=@_residenceForRent.MaxNumberOfGuests DecimalPlaces=0 Minimum=1 Maximum=9999>
                </MatNumericUpDownField>
            </p>

            <p>
                <b> Start Date</b>
            </p>
            <MatDatePicker @bind-Value="@_startDateInput"></MatDatePicker>

            <MatButton OnClick="@(_ => { _startDateInput = DateTime.Now.Date; })">
                Now
            </MatButton>
            <MatButton OnClick="@(_ => { _startDateInput = null; })">
                Empty
            </MatButton>

            <p>
                <b> End Date</b>
            </p>
            <MatDatePicker @bind-Value="@_endDateInput"></MatDatePicker>

            <MatButton OnClick="@(_ => { _endDateInput = null; })">
                Empty
            </MatButton>
            <p>@_errorMessage2</p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { _dialogIsOpen = false; })">Cancel</MatButton>
            <MatButton OnClick="@OkClick">Publish</MatButton>
        </MatDialogActions>
        @foreach (var errorMessage in _validationResults)
        {
            <p class="error-label text-danger">@errorMessage</p>
        }
        <p class="error-label text-danger">@_errorText</p>
    </MatDialog>


    <MatDialog @bind-IsOpen="@_viewResidenceDetailsDialog">
        <MatDialogTitle>Residence Details</MatDialogTitle>
        <MatDialogContent>
            <div class="d-flex flex-column">

                <div class="d-flex justify-content-center">
                    <img class="my-4" width="480" height="240" src="@_viewedResidence.ImageUrl" alt="">
                </div>

                <MatTabGroup>
                    <MatTab class="my-4">
                        <LabelContent>
                            Description <MatIcon Icon="@MatIconNames.Info"></MatIcon>
                        </LabelContent>
                        <ChildContent >
                            @if (_viewedResidence.Description != null)
                            {
                                <p>@_viewedResidence.Description</p>
                            }
                            else
                            {
                                <p>The residence has no rules</p>
                            }
                        </ChildContent>
                    </MatTab>
                    <MatTab class="my-4">
                        <LabelContent>
                            Facilities <MatIcon Icon="@MatIconNames.List"></MatIcon>
                        </LabelContent>
                        <ChildContent>
                            <ul class="list-group">
                                @if (_viewedResidence.Facilities.Count != 0)
                                {
                                    @foreach (var facility in _viewedResidence.Facilities)
                                    {
                                        <li class="list-group-item">@facility.Name</li>
                                    }
                                }
                                else
                                {
                                    <p>The residence has no rules</p>
                                }

                            </ul>
                        </ChildContent>
                    </MatTab>

                    <MatTab class="my-4">
                        <LabelContent>
                            Rules <MatIcon Icon="@MatIconNames.Done_outline"></MatIcon>
                        </LabelContent>
                        <ChildContent>
                            <ul class="list-group">
                                @if (_viewedResidence.Rules.Count() != 0)
                                {
                                    @foreach (var rule in _viewedResidence.Rules)
                                    {
                                        <li class="list-group-item">@rule.Description</li>
                                    }
                                }
                                else
                                {
                                    <p>The residence has no rules</p>
                                }
                            </ul>
                        </ChildContent>
                    </MatTab>

                    <MatTab class="my-4">
                        <LabelContent>
                            Reviews <MatIcon Icon="@MatIconNames.Star_rate"></MatIcon>
                        </LabelContent>
                        <ChildContent>
                            <ul class="list-group">
                                @if (_residenceReviews.Count() != 0)
                                {
                                    foreach (var review in _residenceReviews)
                                    {
                                        <p>
                                            <b>Guest ID: @review.GuestViaId</b>
                                        </p>

                                        <p style="color:grey">Reviewdate: @review.CreatedDate.Date.ToString("MMMM") @review.CreatedDate.Year</p>
                                        <p>Rating @review.Rating <MatIcon Icon="@MatIconNames.Star_rate"></MatIcon></p>
                                        <li class="list-group-item">@review.ReviewText</li>
                                    }
                                }
                                else
                                {
                                    <p>
                                        The residence has
                                        no reviews
                                    </p>
                                }

                            </ul>
                        </ChildContent>
                    </MatTab>

                </MatTabGroup>
                <MatDivider class="my-1"/>

            </div>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@(e => { _viewResidenceDetailsDialog = false; _errorMessage = ""; _errorMessage2 = "";})">Cancel</MatButton>
        </MatDialogActions>
    </MatDialog>
    </div>
    </div>
    <MatSnackbar  @bind-IsOpen="@_snackBarIsOpenPublic">
        <MatSnackbarContent>@_snackBarPublicText</MatSnackbarContent>
      
    </MatSnackbar>
    <MatSnackbar  @bind-IsOpen="@_snackBarIsOpenPrivate">
        <MatSnackbarContent>@_snackBarPrivateText</MatSnackbarContent>
    </MatSnackbar>
   
}
</Authorized>
<NotAuthorized>
    <p>You need to be logged in. UwU</p>
</NotAuthorized>
</AuthorizeView>


@code {
    
    
    private bool _dialogIsOpen = false;
    private bool _viewResidenceDetailsDialog = false;
    private string _errorText = "";
    private string _errorMessage = "";
    private string _errorMessage2 = "";
    private ICollection<ValidationResult> _validationResults = new List<ValidationResult>();
    private IEnumerable<ResidenceReview> _residenceReviews = new List<ResidenceReview>();
    private bool _snackBarIsOpenPublic=false;
    private bool _snackBarIsOpenPrivate=false;
    private string _snackBarPublicText = "Your residence is now public";
    private string _snackBarPrivateText = "Your residence is now private";
    private DateTime? _startDateInput;
    private DateTime? _endDateInput;

    private IList<Residence> _residences;

    private Residence _residenceForRent = new Residence();
    private Residence _viewedResidence = new Residence();

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            var host = await _hostService.GetHostByEmailAsync(user.Claims.FirstOrDefault(c => c.Type.ToString() == "email")?.Value);
            _residences = await _residenceService.GetResidencesByHostIdAsync(host.Id);
            StateHasChanged();
        }
        catch (Exception e)
        {
            _errorMessage = "";
            _errorMessage = "Something went wrong.. try refreshing the page";
        }
    }


    private void OpenDialog(Residence residence)
    {
        residence.AvailableFrom = null;
        residence.AvailableTo = null;
        _errorMessage2 = "";
        _residenceForRent = residence;
        _dialogIsOpen = true;
    }

    private async void OpenResidenceDetailsDialog(Residence residence)
    {
        _residenceReviews = await _residenceReviewService.GetAllByResidenceIdAsync(residence.Id);
        _viewedResidence = residence;
        _viewResidenceDetailsDialog = true;
    }

    private async void SetToPrivate(Residence residence)
    {
       
        var isConfirmed = await _matDialogService.ConfirmAsync("Are you sure you want to set your residence to private?");
        if (isConfirmed)
        {
            try
            {
                residence.AvailableFrom = DateTime.MaxValue.AddDays(-1);
                residence.AvailableTo = DateTime.MaxValue;
                residence.IsAvailable = false;
                Residence updatedResidence = await _residenceService.UpdateResidenceAsync(residence);
                residence.IsAvailable = updatedResidence.IsAvailable;
               
                StateHasChanged();
                _snackBarIsOpenPrivate = true;
                StateHasChanged();
            }
            catch (Exception e)
            {
                _errorMessage2 = "";
                _errorMessage2 = e.Message;
            }
           
        }
    }

    private async void OkClick()
    {
    //clear error messages
        _validationResults.Clear();
    // the validator validates in the context of a residence object
        var validationContext = new ValidationContext(_residenceForRent);

    //validates all residence properties in context of residence model
        var rentIsValid = Validator.TryValidateObject(_residenceForRent, validationContext, _validationResults, true);


        if (rentIsValid)
        {
            try
            {
                var isConfirmed = await _matDialogService.ConfirmAsync("Are you sure you want to set the residence to public?");
                if (isConfirmed)
                {
                    _residenceForRent.IsAvailable = true;
                    Console.WriteLine(_startDateInput + " and to: "+ _endDateInput);
                    
                    _residenceForRent.AvailableFrom = _startDateInput.Value.AddDays(1);
                    _residenceForRent.AvailableTo = _endDateInput.Value.AddDays(1);
                    
                    await _residenceService.UpdateResidenceAsync(_residenceForRent);
                    _dialogIsOpen = false;

                    StateHasChanged();
                    _snackBarIsOpenPublic = true;
                    StateHasChanged();
                }
                
            }
            catch (Exception e)
            {
                _errorText = e.Message;
                StateHasChanged();
                return;
            }

            _dialogIsOpen = false;
            Console.WriteLine("success");
        }
    }

    private void ToEditResidence(int id)
    {
        _navigationManager.NavigateTo($"EditResidence/{id}");
    }

}