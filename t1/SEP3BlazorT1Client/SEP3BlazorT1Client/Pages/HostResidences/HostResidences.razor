@page "/HostResidences"
@using SEP3BlazorT1Client.Models
@using SEP3BlazorT1Client.Data
@using System.Reflection.Metadata
@using System.ComponentModel.DataAnnotations
@inject IResidenceService ResidenceService
@inject IHostService hostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<!--<h3>BuildingOverview</h3>-->

<style>
            .demo-mat-card {
                max-width: 400px;
                padding-top: 5px;
                margin-top: 6px;
            }
 
            .demo-mat-card-content {
                padding: 1rem;
            }
 
            .demo-mat-card-clean-margin {
                margin: 0px;
            }
  </style>
@if (_residences == null)
{
    <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium"/>
}
@if (_residences.Count == 0)
{
    <p> You have no registered residences. Press the button below to register one.</p>
    <MatButton OnClick="@(() =>NavigationManager.NavigateTo("/registerresidences"))" Label="Go to residence registration" ></MatButton>
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">
            @foreach (var residence in _residences)
            {
                <div class="mat-layout-grid-cell">
                    <MatCard class="demo-mat-card">
                        <MatCardContent>
                            <MatCardMedia Wide="true" ImageUrl=@residence.ImageUrl></MatCardMedia>
                            <div class="demo-mat-card-content">
                                <MatHeadline6 class="demo-mat-card-clean-margin">
                                    Unique stays
                                </MatHeadline6>
                                <MatSubtitle2 class="demo-mat-card-clean-margin">
                                    @residence.Address.ToString()
                                </MatSubtitle2>
                            </div>

                            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                @residence.Description
                            </MatBody2>
                            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin">
                                @residence.PricePerNight
                            </MatBody2>

                        </MatCardContent>
                        <MatCardActions>
                            <MatButton OnClick="@(() => OpenDialog(residence))">set to public</MatButton>
                        </MatCardActions>
                    </MatCard>
                </div>
            }

            <MatDialog @bind-IsOpen="@dialogIsOpen">
                <MatDialogTitle>Set the period of availability for the residence</MatDialogTitle>
                <MatDialogContent>
                    <p>
                        <MatNumericUpDownField Label="Maximum number of guests"@bind-Value=@ResidenceForRent.MaxNumberOfGuests DecimalPlaces=0 Minimum=1 Maximum=9999>
                        </MatNumericUpDownField>
                    </p>

                    @* Availablefrom *@

                    <p>
                        <b> Start Date</b>
                    </p>
                    <MatDatePicker @bind-Value="@ResidenceForRent.AvailableFrom"></MatDatePicker>

                    <MatButton OnClick="@(_ => { ResidenceForRent.AvailableFrom = DateTime.Now; })">
                        Now
                    </MatButton>
                    <MatButton OnClick="@(_ => { ResidenceForRent.AvailableFrom = null; })">
                        Empty
                    </MatButton>

                    @* AvailableTo*@
                    <p>
                        <b> End Date</b>
                    </p>
                    <MatDatePicker @bind-Value="@ResidenceForRent.AvailableTo"></MatDatePicker>

                    <MatButton OnClick="@(_ => { ResidenceForRent.AvailableTo = null; })">
                        Empty
                    </MatButton>
                </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { dialogIsOpen = false; })">Cancel</MatButton>
                    <MatButton OnClick="@OkClick">Publish</MatButton>
                </MatDialogActions>
                @foreach (var errorMessage in validationResults)
                {
                    <p class="error-label text-danger">@errorMessage</p>
                }
                <p class="error-label text-danger">@_errorText</p>
            </MatDialog>
        </div>
    </div>
}

@code {
    bool dialogIsOpen = false;
    int maxNumberOfGuests;
    private string _errorText;
    private ICollection<ValidationResult> validationResults = new List<ValidationResult>();

    IList<Residence> _residences= new List<Residence>();

    Residence ResidenceForRent = new Residence();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            var host = await hostService.GetHostById(Int32.Parse(user.Claims.FirstOrDefault(c => c.Type.ToString() == "Id")?.Value));
            _residences = await ResidenceService.GetResidencesByHostIdAsync(host.Id);
        }
        catch (Exception e)
        {
            _errorText = e.Message;
        }
    }


    void OpenDialog(Residence residence)
    {
        ResidenceForRent = residence;
        dialogIsOpen = true;
    }

    private async void OkClick()
    {
    //clear error messages
        validationResults.Clear();
    // the validator validates in the context of a residence object
        ValidationContext validationContext = new ValidationContext(ResidenceForRent);

    //validates all residence properties in context of residence model
        bool rentIsValid = Validator.TryValidateObject(ResidenceForRent, validationContext, validationResults, true);


        if (rentIsValid)
        {
            ResidenceForRent.IsAvailable = true;
            try
            {
                await ResidenceService.UpdateResidenceAvailabilityAsync(ResidenceForRent);
            }
            catch (Exception e)
            {
                _errorText = e.Message;
                StateHasChanged();
                return;
            }

            dialogIsOpen = false;
            Console.WriteLine("succes");
        }
    }


    private async Task<Residence> ChangeAvailability(Residence residence)
    {
        return await ResidenceService.UpdateResidenceAvailabilityAsync(residence);
    }

}