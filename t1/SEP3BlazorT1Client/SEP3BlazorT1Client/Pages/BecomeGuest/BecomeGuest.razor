@page "/BecomeGuest"
@using SEP3BlazorT1Client.Models
@using SEP3BlazorT1Client.Data
@using System.IO
@using System.Text
@using SEP3BlazorT1Client.Authentication
@inject MatDialogService MatDialogService
@inject NavigationManager NavigationManager
@inject IHostService HostService
@inject IGuestService GuestService
@inject AuthenticationStateProvider AuthStateProvider
<AuthorizeView Policy="MustBeHost">
    <Authorized Context="Auth">
        @if (_newGuest != null && _host != null)
        {
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                        <h1>Are you<br/> a student of <br/>VIA University College?</h1>
                        <h2>Need a tempoary place to stay while on e.g. internship?</h2>
                        <p>
                            Make a request to become an approved guest and start renting cheap tempoary residences around all of
                            Denmark, today.
                        </p>
                        <MatButton Label="Become Guest" Raised="true" OnClick="@OpenDialog"/>
                        <MatDialog @bind-IsOpen="@_dialogIsOpen">
                            <MatDialogTitle>Request to become a Guest</MatDialogTitle>
                            <MatDialogContent>
                                <EditForm Model="@_newGuest">
                                    <DataAnnotationsValidator/>
                                    <MatTextField @bind-Value="@_newGuest.ViaId" Label="Student Number" HelperText="e.g 293886"/>
                                    <ValidationMessage For="@(() => _newGuest.ViaId)"/>
                                    <p class="error-label">@_errorLabel</p>
                                </EditForm>
                            </MatDialogContent>
                            <MatDialogActions>
                                <MatButton OnClick="@CreateGuestRegistrationRequest">Send Request</MatButton>
                                <MatButton OnClick="@(() => _dialogIsOpen = false)">Cancel</MatButton>
                            </MatDialogActions>
                        </MatDialog>
                    </div>
                    <div class="mat-layout-grid-cell">
                        <img src="assets/via_campus_horsens.jpg" alt="campus horsens" style="max-height: 500px; max-width:600px">
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-align-middle">
                        <MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Medium"/>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>GO BACK IDIOT</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    //TODO: Fetch auth user and set as Host in new Request, wrap components in CascadingAuthenticationState
    private Host _host;
    private Guest _newGuest;
    private bool _dialogIsOpen = false;
    private string _errorLabel = "";


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Console.WriteLine("\nClaims:");
        foreach (var claim in user.Claims)
        {
            Console.WriteLine($"{claim.Type.ToString()} {claim.Value}");
        }
        _host = await HostService.GetHostByEmail((user.Claims.FirstOrDefault(c => c.Type.ToString() == "email").Value));

        _newGuest = new Guest
        {
            FirstName = _host.FirstName,
            LastName = _host.LastName,
            Cpr = _host.Cpr,
            Email = _host.Email,
            Id = _host.Id,
            IsApprovedHost = _host.IsApprovedHost,
            Password = _host.Password,
            HostReviews = _host.HostReviews,
            GuestReviews = new List<GuestReview>(),
            IsApprovedGuest = false,
            ViaId = 0,
            PhoneNumber = _host.PhoneNumber,
            ProfileImageUrl = _host.ProfileImageUrl
        };


        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private void OpenDialog()
    {
        _dialogIsOpen = true;
    }

    private async void CreateGuestRegistrationRequest()
    {
        try
        {
            _errorLabel = "";
            await GuestService.CreateGuestAsync(_newGuest);
            _dialogIsOpen = false;
            ResetModel();
            StateHasChanged();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            _errorLabel = e.Message;
            StateHasChanged();
        }
    }

    private void ResetModel()
    {
        _host = null;
        _newGuest = new Guest
        {
            FirstName = _host.FirstName,
            LastName = _host.LastName,
            Cpr = _host.Cpr,
            Email = _host.Email,
            Id = _host.Id,
            IsApprovedHost = _host.IsApprovedHost,
            Password = _host.Password,
            HostReviews = _host.HostReviews,
            GuestReviews = new List<GuestReview>(),
            IsApprovedGuest = false,
            ViaId = 0,
            PhoneNumber = _host.PhoneNumber,
            ProfileImageUrl = _host.ProfileImageUrl
        };
    }




}