@page "/Residences"
@using SEP3BlazorT1Client.Data
@using SEP3BlazorT1Client.Models
@using SEP3BlazorT1Client.Components.ResidenceCard
@inject IResidenceService ResidenceService
@inject IResidenceReviewService residenceReviewService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGuestService GuestService
@inject IHostService HostService
@inject IHostReviewService HostReviewService
@inject NavigationManager NavigationManager
@* TODO: Add AuthorizeView *@

<p>@Errormessage</p>

@if (_availableResidences != null)
{
    @if (_residencesToShow.Count > 0)
    {
        // FILTERS DO NOT WORK YET, TO BE IMPLEMENTED WHEN WE WORK ON THAT USERSTORY.
        <div class="page-container">
            <div class="container-fluid d-flex flex-row residence-filters">
                <MatTextField @bind-Value="@CityFilter" Label="filter by city name" Outlined="true" OnKeyPress="@FilterResidences"/>
                <div class="d-flex flex-column">
                    <MatTextField @bind-Value="@MaxPriceFilter" Outlined="true" Label="Filter by max DKK / night" HelperText="Enter a max price in DKK / night or use the slider" OnInput="@FilterResidences"/>
                    <MatSlider @bind-Value="@_maxPriceFilter" ValueMin="0" ValueMax="10000" Style="max-width: 500px;" Disabled="true"/>
                </div>
            </div>
            <div class="container-fluid d-flex flex-wrap residence-directory">
                @foreach (var r in _residencesToShow)
                {
                    <MatRipple @onclick="@(() => OpenResidenceDetailsDialog(r))">
                        <ResidenceCard Residence="@r"/>
                        <MatButton OnClick="@(() => OpenResidenceDetailsDialog(r))">Details</MatButton>
                    </MatRipple>
                }
            </div>
        </div>
    }
    else
    {
        <div class="container-fluid d-flex flex-row residence-filters">
            <MatTextField @bind-Value="@CityFilter" Label="filter by city name" Outlined="true"/>
            <div class="d-flex flex-column">
                <MatTextField @bind-Value="@MaxPriceFilter" Outlined="true" Label="Filter by max DKK / night" HelperText="Enter a max price in DKK / night or use the slider"/>
            </div>
        </div>
        <p>No available residences.</p>
    }
}
else
{
    <MatProgressBar  Indeterminate="true" Reversed="true"></MatProgressBar>
}


<MatDialog @bind-IsOpen="@viewResidenceDetailsDialog" Style="min-width: 1000px!important; min-height:600px" Class="detail-container large" SurfaceStyle="min-width:1000px !important;">
    <MatDialogTitle>Residence Details</MatDialogTitle>
    <MatDialogContent Style="min-width: 1000px; min-height:600px" Class="large">
        <div class="d-flex flex-column container-fluid" >
            <div class="">
              @ViewedResidence.Address
            </div>
            <MatTabGroup>
                <MatTab class="my-4">
                    <LabelContent>
                        Description <MatIcon Icon="@MatIconNames.Info"></MatIcon>
                    </LabelContent>
                    <ChildContent>
                        <h4 class="mat-h4">Residence Description</h4>
                        @if (ViewedResidence.Description != null)
                        {
                            <p>@ViewedResidence.Description</p>
                        }
                        else
                        {
                            <p>This residence has no description</p>
                        }
                    </ChildContent>
                </MatTab>
                <MatTab class="my-4">
                    <LabelContent>
                        Facilities <MatIcon Icon="@MatIconNames.List"></MatIcon>
                    </LabelContent>
                    <ChildContent>
                        <h4 class="mat-h4">Residence Facilities</h4>
                        <ul class="list-group">
                            @if (ViewedResidence.Facilities.Count() != 0)
                            {
                                @foreach (var facility in @ViewedResidence.Facilities)
                                {
                                    <li class="list-group-item">@facility.Name</li>
                                    <MatDivider class="my-1"/>
                                }
                            }
                            else
                            {
                                <p>The residence has no facilities</p>
                            }

                        </ul>
                    </ChildContent>
                </MatTab>

                <MatTab class="my-4">
                    <LabelContent>
                        Rules <MatIcon Icon="@MatIconNames.Done_outline"></MatIcon>
                    </LabelContent>
                    <ChildContent>
                        <h4 class="mat-h4">Rules</h4>
                        <ul class="list-group">
                            @if (ViewedResidence.Rules.Count() != 0)
                            {
                                foreach (var rule in @ViewedResidence.Rules)
                                {
                                    <li class="list-group-item">@rule.Description</li>
                                    <MatDivider class="my-1"/>
                                }
                            }
                            else
                            {
                                <p>The residence has no rules</p>
                            }

                        </ul>
                    </ChildContent>
                </MatTab>

                <MatTab class="my-4">
                    <LabelContent>
                        Reviews <MatIcon Icon="@MatIconNames.Star_rate"></MatIcon>
                    </LabelContent>
                    <ChildContent>
                        <ul class="list-group">
                            @if (ResidenceReviews.Count() != 0)
                            {
                                foreach (var review in ResidenceReviews)
                                {
                                    <p>
                                        <b>Guest ID: @review.GuestViaId</b>
                                    </p>

                                    <p style="color:grey">Reviewdate: @review.CreatedDate.Date.ToString("MMMM") @review.CreatedDate.Year</p>
                                    <p>Rating @review.Rating <MatIcon Icon="@MatIconNames.Star_rate"></MatIcon></p>
                                    <li class="list-group-item">@review.ReviewText</li>
                                    <MatDivider class="my-1"/>
                                }
                            }
                            else
                            {
                                <p>
                                    The residence has
                                    no reviews
                                </p>
                            }

                        </ul>
                        <ul class="list-group">
                            @if (_hostReviewList.Count() != 0)
                            {
                                foreach (var item in _hostReviewList)
                                {
                                    <MatButton @onclick="@(() => ToReviewHost(item.HostId))">
                                        <b>Host Rating: @item.Rating</b>
                                    </MatButton>
                        
                                    <p style="color:grey">Reviewdate: @item.CreatedDate.Date.ToString("MMMM") @item.CreatedDate.Year</p>
                                    <p>Rating @item.Rating <MatIcon Icon="@MatIconNames.Star_rate"></MatIcon></p>
                                    <li class="list-group-item">@item.Text</li>
                                    <MatDivider class="my-1"/>
                                }
                            }
                            else
                            {
                                <p>
                                    The host has
                                    no reviews
                                </p>
                            }
                        
                        </ul>
                    </ChildContent>
                </MatTab>
            </MatTabGroup>
            <MatDivider class="my-1"/>
        </div>

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { viewResidenceDetailsDialog = false; })">Cancel</MatButton>
    </MatDialogActions>
</MatDialog>


@code {

    bool viewResidenceDetailsDialog = false;
    private IList<Residence> _availableResidences;
    private IList<Residence> _residencesToShow;
    Residence ViewedResidence = new Residence();
    IEnumerable<ResidenceReview> ResidenceReviews = new List<ResidenceReview>();
    private IEnumerable<HostReview> _hostReviewList = new List<HostReview>();
    private Host _host;
    private Guest guest;
    private string _cityFilter = "";
    private long? _maxPriceFilter = 0;
    string Errormessage = "";

    public string CityFilter
    {
        get => _cityFilter;
        set
        {
            _cityFilter = value;
            StateHasChanged();
            FilterResidences();
        }
    }

    public long? MaxPriceFilter
    {
        get => _maxPriceFilter;
        set
        {
            _maxPriceFilter = value;
            StateHasChanged();
            FilterResidences();
        }
    }

    async void OpenResidenceDetailsDialog(Residence residence)
    {
        ViewedResidence = residence;
        ResidenceReviews = await residenceReviewService.GetAllByResidenceIdAsync(residence.Id);
        _hostReviewList = await HostReviewService.GetAllHostReviewsByHostIdAsync(residence.Host.Id);
        viewResidenceDetailsDialog = true;
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _availableResidences = await ResidenceService.GetAllAvailableResidencesAsync();
            _residencesToShow = _availableResidences;
        }
        catch (Exception e)
        {
            Errormessage = "";
            Errormessage = "Something went wrong.. try refreshing the page";
        }
       
    }


    private void FilterResidences()
    {
        if (MaxPriceFilter is > 0 && string.IsNullOrEmpty(CityFilter))
        {
            _residencesToShow = _availableResidences.Where(r => r.PricePerNight <= MaxPriceFilter).ToList();
        }
        else if (MaxPriceFilter is not > 0 && string.IsNullOrEmpty(CityFilter))
        {
            _residencesToShow = _availableResidences;
        }
        else if (!string.IsNullOrEmpty(CityFilter) && MaxPriceFilter is not > 0)
        {
            _residencesToShow = _availableResidences.Where(r => r.Address.City.CityName.ToLower().Contains(CityFilter.ToLower())).ToList();
        }
        else if (MaxPriceFilter is > 0 && !string.IsNullOrEmpty(CityFilter))
        {
            _residencesToShow = _availableResidences.Where(r => r.Address.City.CityName.ToLower().Contains(CityFilter.ToLower()) && r.PricePerNight <= MaxPriceFilter).ToList();
        }
    }

    private void ToReviewHost(int id)
    {
        NavigationManager.NavigateTo($"ReviewHost/{id}");
    }
}