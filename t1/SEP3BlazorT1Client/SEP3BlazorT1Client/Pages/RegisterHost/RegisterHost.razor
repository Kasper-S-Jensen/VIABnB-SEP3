@page "/RegisterHost"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using SEP3BlazorT1Client.Data
@using SEP3BlazorT1Client.Models
@inject NavigationManager NavigationManager
@inject IHostService _hostservice

<AuthorizeView>
    <NotAuthorized>
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">

                <div class=" mat-layout-grid-cell-span-6">
                    <img src="https://i.imgur.com/KWl6pqT.jpg" alt="Greeting illustration">
                </div>

                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6 ">
                    <h2>Create an account</h2>
                    <p>
                        <MatTextField Icon="person" Label="Firstname*" @bind-Value="_newHost.FirstName"/>
                    </p>

                    <p>
                        <MatTextField Icon="person" Label="Lastname*" @bind-Value="_newHost.LastName"/>
                    </p>


                    <p>
                        <MatTextField Icon="person" Label="CPR number*" @bind-Value="_newHost.Cpr"/>
                    </p>

                    <p>
                        <MatTextField Icon="email" Label="E-mail*" @bind-Value="_newHost.Email"/>
                    </p>

                    <p>
                        <MatTextField Icon="phone" Label="Phone number*" @bind-Value="_newHost.PhoneNumber"/>
                    </p>

                    <p>
                        <MatTextField Icon="lock" Label="Password*" @bind-Value="_newHost.Password"/>
                    </p>

                    <p>
                        <MatTextField Icon="lock" Label="Confirm password*" @bind-Value="_passwordConfirmation"/>
                    </p>


                    @foreach (var errorMessage in validationResults)
                    {
                        <p class="error-label text-danger">@errorMessage</p>
                    }
                    <p class="error-label text-danger">@_errorText</p>

                    <MatButton OnClick="@CreateHost" Label="Register" Raised="true"></MatButton>
                    <MatButton OnClick="@(() => NavigationManager.NavigateTo("/"))" Label="Already have an account?"></MatButton>
                </div>
            </div>
        </div>
    </NotAuthorized>

    <Authorized>
        <p>Already logged in, redirecting...</p>
    </Authorized>
</AuthorizeView>


@code {
    private string _errorText;
    private string _passwordConfirmation;
    private Host _newHost = new Host();
    private ICollection<ValidationResult> validationResults = new List<ValidationResult>();

    private async void CreateHost()
    {
    //clear error messages
        validationResults.Clear();
    // the validator validates in the context of a host object
        ValidationContext validationContext = new ValidationContext(_newHost);

    //validates all host properties in context of host model
        bool hostIsValid = Validator.TryValidateObject(_newHost, validationContext, validationResults, true);


    //checks if passwords match
        if (!PasswordConfirmationMatches())
        {
            _errorText = "Passwords does not match";
            return;
        }

        if (hostIsValid)
        {
            try
            {
            
    //Throws exception if user already exists.
                await _hostservice.RegisterHostAsync(_newHost);
            }
            catch (Exception e)
            {
                _errorText = e.Message;
                StateHasChanged();
                return;
            }
    //User is logged on upon successful account creation
    //   await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(_newUser.Username, _newUser.Password);
            NavigationManager.NavigateTo("/");
        }
    }

    private bool PasswordConfirmationMatches()
    {
        if (_passwordConfirmation == null)
        {
            _errorText = "Please confirm password";
        }
        return _passwordConfirmation == _newHost.Password;
    }

}