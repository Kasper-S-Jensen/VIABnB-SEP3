@page "/RegisterHost"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using SEP3BlazorT1Client.Data
@using SEP3BlazorT1Client.Models
@inject NavigationManager NavigationManager
@inject IHostService _hostservice
<h3>RegisterUser</h3>

@* <AuthorizeView> *@
    @* <NotAuthorized> *@
        <div class="sign-up-container">
            <div class="left-section">
<img src="https://i.imgur.com/KWl6pqT.jpg" alt="Greeting illustration">
            </div>

            <div class="right-section">
                <h2>Create an account</h2>
                <div class="form-group">
                    <label>E-mail*</label>
                    <input type="text" placeholder="Username" @bind-value="_newHost.Email">
                </div>

                <div class="form-group">
                    <label>Password*</label>
                    <input type="password" placeholder="Password" @bind-value="_newHost.Password">
                </div>  <div class="form-group">
                    <label>Confirm Password*</label>
                    <input type="password" placeholder="Confirm password" @bind-value="_passwordConfirmation">
                </div>

                @foreach (var errorMessage in validationResults)
                {
                    <p class="error-label">@errorMessage</p>
                }
                <p class="error-label">@_errorText</p>
                <button @onclick="CreateHost">Create</button>
                <p class="p-go-to-login">Already have an account? <span @onclick='() => NavigationManager.NavigateTo("/Login")'>Go to login</span></p>
            </div>
        </div>
    @* </NotAuthorized> *@

    @*<Authorized>
        <p>Already logged in, redirecting...</p>
    </Authorized>
</AuthorizeView>*@




@code {
    private string _errorText;
    private string _passwordConfirmation; 
    private Host _newHost = new Host();
    private ICollection<ValidationResult> validationResults = new List<ValidationResult>();
    
    private async void CreateHost()
    {

        validationResults.Clear();
        ValidationContext validationContext = new ValidationContext(_newHost);
        bool userIsValid = Validator.TryValidateObject(_newHost, validationContext, validationResults, true);
        foreach (var validationResult in validationResults)
        {
    //Debugging
            Console.WriteLine(validationResult);
        }

        if (!PasswordConfirmationMatches())
        {
            _errorText = "Passwords does not match";
            return; 
        }
        
        if (userIsValid)
        {
            try
            {
    //Throws exception if user already exists.
                await _hostservice.RegisterHostAsync(_newHost);
            }
            catch (Exception e)
            {
                _errorText = e.Message;
                StateHasChanged();
                return;
            }
    //User is logged on upon successful account creation
         //   await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(_newUser.Username, _newUser.Password);
           // NavigationManager.NavigateTo("/");
        }
    }

    private bool PasswordConfirmationMatches()
    {
        return _passwordConfirmation == _newHost.Password;
    }
}