@page "/Messages"
@inject NavigationManager NavigationManager; 
@inject AuthenticationStateProvider AuthenticationStateProvider; 
@inject IUserService UserService
@using SEP3BlazorT1Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@using SEP3BlazorT1Client.Data
@using System.Text.Json

@foreach (var message in _messages)
{
    <p>@message.Content</p>
}

@code {
    private Queue<Message> _messages = new();
    private HubConnection _connection;
    private User _sender;
    private User _receiver;
    private IDictionary<string, User> _contactedUsers = new Dictionary<string, User>(); 

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _sender = await UserService.GetUserByEmailAsync(user.Identity.Name);
        _connection = new HubConnectionBuilder().WithUrl($"https://localhost:5001/chat?email={_sender.Email}").WithAutomaticReconnect().Build();
        _connection.On<string>("ReceiveMessage", ReceiveMessage);
        _connection.On<string>("ReceiveUserMessages", ReceiveUserMessages);
        await _connection.StartAsync();
        await _connection.InvokeAsync("GetMessages");
        foreach (var message in _messages)
        {
            
        }
        StateHasChanged();
    }

    private void ReceiveMessage(string messageAsJson)
    {
        var messageReceived = JsonSerializer.Deserialize<Message>(messageAsJson, new JsonSerializerOptions(){PropertyNamingPolicy = JsonNamingPolicy.CamelCase});
         _messages.Enqueue(messageReceived);
    }

    private void ReceiveUserMessages(string messagesAsJson)
    {
        Console.WriteLine($"Received messages: {messagesAsJson}");
        var receivedMessages = JsonSerializer.Deserialize<Queue<Message>>(messagesAsJson, new JsonSerializerOptions() {PropertyNamingPolicy = JsonNamingPolicy.CamelCase});
        _messages = receivedMessages;
        StateHasChanged();
    }

}